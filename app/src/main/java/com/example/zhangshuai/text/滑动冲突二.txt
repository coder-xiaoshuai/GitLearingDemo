package com.flowsns.flow.commonui.widget;

import android.content.Context;
import android.support.annotation.Nullable;
import android.support.v4.view.ViewPager;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.ViewParent;

/**
 * @author zhangshuai
 */

public class HorizontalRecyclerView extends RecyclerView {
    private int lastX = 0;
    private int lastY = 0;
    private int mTouchSlop = 8;
    private static final int MIN_RECO_ONLINE_USERS_COUNT = 10;
    private boolean firstCompletelyVisible;
    private boolean lastCompletelyVisible;

    public HorizontalRecyclerView(Context context) {
        super(context);
    }

    public HorizontalRecyclerView(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
    }

    public HorizontalRecyclerView(Context context, @Nullable AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    @Override
    public boolean dispatchTouchEvent(MotionEvent ev) {

        switch (ev.getAction()) {
            case MotionEvent.ACTION_DOWN:
                lastX = (int) ev.getX();
                lastY = (int) ev.getY();
                firstCompletelyVisible =
                    ((LinearLayoutManager) getLayoutManager()).findFirstCompletelyVisibleItemPosition() == 0 ? true
                        : false;
                lastCompletelyVisible =
                    ((LinearLayoutManager) getLayoutManager()).findLastCompletelyVisibleItemPosition()
                        == getAdapter().getItemCount() - 1 ? true : false;
                requestViewPagerIntercept(true);
                break;
            case MotionEvent.ACTION_MOVE:
                int x = (int) ev.getX();
                int y = (int) ev.getY();
                int dealtX = Math.abs(x - lastX);
                int dealtY = Math.abs(y - lastY);

                if (dealtX >= dealtY && dealtX > mTouchSlop) {
                    if (((LinearLayoutManager) getLayoutManager()).findFirstCompletelyVisibleItemPosition() == 0
                        && firstCompletelyVisible) {
                        requestViewPagerIntercept(false);
                    }
                    if ((((LinearLayoutManager) getLayoutManager()).findLastCompletelyVisibleItemPosition()
                        == getAdapter().getItemCount() - 1 && getAdapter().getItemCount() < MIN_RECO_ONLINE_USERS_COUNT)
                        && lastCompletelyVisible) {
                        requestViewPagerIntercept(false);
                    }
                }
                break;
            case MotionEvent.ACTION_CANCEL:
            case MotionEvent.ACTION_UP:
                lastX = 0;
                lastY = 0;
                break;
        }
        return super.dispatchTouchEvent(ev);
    }

    private void requestViewPagerIntercept(boolean intercept) {
        /*--------解决垂直RecyclerView嵌套水平RecyclerView横向滑动不流畅问题 end --------*/
        /*---解决ViewPager嵌套垂直RecyclerView嵌套水平RecyclerView横向滑动到底后不滑动ViewPager start ---*/
        ViewParent parent = this;
        while (!((parent = parent.getParent()) instanceof ViewPager)) ;// 循环查找viewPager
        parent.requestDisallowInterceptTouchEvent(intercept);
        /*---解决ViewPager嵌套垂直RecyclerView嵌套水平RecyclerView横向滑动到底后不滑动ViewPager end ---*/
    }

}
